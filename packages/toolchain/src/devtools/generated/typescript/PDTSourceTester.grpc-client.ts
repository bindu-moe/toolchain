// @generated by protobuf-ts 2.8.3 with parameter client_grpc1
// @generated from protobuf file "PDTSourceTester.proto" (syntax proto3)
// tslint:disable
import { PaperbackSourceTester } from "./PDTSourceTester";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { SourceTestResponse } from "./PDTSourceTester";
import type { SourceTestRequest } from "./PDTSourceTester";
import type { SourceInstallResponse } from "./PDTSourceTester";
import type { SourceInstallRequest } from "./PDTSourceTester";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service PaperbackSourceTester
 */
export interface IPaperbackSourceTesterClient {
    /**
     * @generated from protobuf rpc: installSource(SourceInstallRequest) returns (SourceInstallResponse);
     */
    installSource(input: SourceInstallRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: SourceInstallResponse) => void): grpc.ClientUnaryCall;
    installSource(input: SourceInstallRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: SourceInstallResponse) => void): grpc.ClientUnaryCall;
    installSource(input: SourceInstallRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: SourceInstallResponse) => void): grpc.ClientUnaryCall;
    installSource(input: SourceInstallRequest, callback: (err: grpc.ServiceError | null, value?: SourceInstallResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: testSource(SourceTestRequest) returns (stream SourceTestResponse);
     */
    testSource(input: SourceTestRequest, metadata?: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientReadableStream<SourceTestResponse>;
    testSource(input: SourceTestRequest, options?: grpc.CallOptions): grpc.ClientReadableStream<SourceTestResponse>;
}
/**
 * @generated from protobuf service PaperbackSourceTester
 */
export class PaperbackSourceTesterClient extends grpc.Client implements IPaperbackSourceTesterClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * @generated from protobuf rpc: installSource(SourceInstallRequest) returns (SourceInstallResponse);
     */
    installSource(input: SourceInstallRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: SourceInstallResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: SourceInstallResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: SourceInstallResponse) => void)): grpc.ClientUnaryCall {
        const method = PaperbackSourceTester.methods[0];
        return this.makeUnaryRequest<SourceInstallRequest, SourceInstallResponse>(`/${PaperbackSourceTester.typeName}/${method.name}`, (value: SourceInstallRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): SourceInstallResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: testSource(SourceTestRequest) returns (stream SourceTestResponse);
     */
    testSource(input: SourceTestRequest, metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientReadableStream<SourceTestResponse> {
        const method = PaperbackSourceTester.methods[1];
        return this.makeServerStreamRequest<SourceTestRequest, SourceTestResponse>(`/${PaperbackSourceTester.typeName}/${method.name}`, (value: SourceTestRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): SourceTestResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), options);
    }
}
