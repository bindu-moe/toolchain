// @generated by protobuf-ts 2.8.3 with parameter client_grpc1
// @generated from protobuf file "PDTLogger.proto" (syntax proto3)
// tslint:disable
import { PaperbackLogger } from "./PDTLogger";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { LogLine } from "./PDTLogger";
import type { LogFilter } from "./PDTLogger";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service PaperbackLogger
 */
export interface IPaperbackLoggerClient {
    /**
     * @generated from protobuf rpc: streamLogs(LogFilter) returns (stream LogLine);
     */
    streamLogs(input: LogFilter, metadata?: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientReadableStream<LogLine>;
    streamLogs(input: LogFilter, options?: grpc.CallOptions): grpc.ClientReadableStream<LogLine>;
}
/**
 * @generated from protobuf service PaperbackLogger
 */
export class PaperbackLoggerClient extends grpc.Client implements IPaperbackLoggerClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * @generated from protobuf rpc: streamLogs(LogFilter) returns (stream LogLine);
     */
    streamLogs(input: LogFilter, metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientReadableStream<LogLine> {
        const method = PaperbackLogger.methods[0];
        return this.makeServerStreamRequest<LogFilter, LogLine>(`/${PaperbackLogger.typeName}/${method.name}`, (value: LogFilter): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): LogLine => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), options);
    }
}
