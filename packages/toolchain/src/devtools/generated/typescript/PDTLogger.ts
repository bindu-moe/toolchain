// @generated by protobuf-ts 2.8.3 with parameter client_grpc1
// @generated from protobuf file "PDTLogger.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message LogLine
 */
export interface LogLine {
    /**
     * @generated from protobuf field: LogLevel level = 1;
     */
    level: LogLevel;
    /**
     * @generated from protobuf field: repeated string tags = 2;
     */
    tags: string[];
    /**
     * @generated from protobuf field: string message = 3;
     */
    message: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp date = 4;
     */
    date?: Timestamp;
}
/**
 * @generated from protobuf message LogFilter
 */
export interface LogFilter {
}
/**
 * @generated from protobuf enum LogLevel
 */
export enum LogLevel {
    /**
     * @generated from protobuf enum value: INFO = 0;
     */
    INFO = 0,
    /**
     * @generated from protobuf enum value: WARN = 1;
     */
    WARN = 1,
    /**
     * @generated from protobuf enum value: ERROR = 2;
     */
    ERROR = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class LogLine$Type extends MessageType<LogLine> {
    constructor() {
        super("LogLine", [
            { no: 1, name: "level", kind: "enum", T: () => ["LogLevel", LogLevel] },
            { no: 2, name: "tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "date", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<LogLine>): LogLine {
        const message = { level: 0, tags: [], message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LogLine>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogLine): LogLine {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* LogLevel level */ 1:
                    message.level = reader.int32();
                    break;
                case /* repeated string tags */ 2:
                    message.tags.push(reader.string());
                    break;
                case /* string message */ 3:
                    message.message = reader.string();
                    break;
                case /* google.protobuf.Timestamp date */ 4:
                    message.date = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.date);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LogLine, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* LogLevel level = 1; */
        if (message.level !== 0)
            writer.tag(1, WireType.Varint).int32(message.level);
        /* repeated string tags = 2; */
        for (let i = 0; i < message.tags.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.tags[i]);
        /* string message = 3; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        /* google.protobuf.Timestamp date = 4; */
        if (message.date)
            Timestamp.internalBinaryWrite(message.date, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LogLine
 */
export const LogLine = new LogLine$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogFilter$Type extends MessageType<LogFilter> {
    constructor() {
        super("LogFilter", []);
    }
    create(value?: PartialMessage<LogFilter>): LogFilter {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LogFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogFilter): LogFilter {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LogFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LogFilter
 */
export const LogFilter = new LogFilter$Type();
/**
 * @generated ServiceType for protobuf service PaperbackLogger
 */
export const PaperbackLogger = new ServiceType("PaperbackLogger", [
    { name: "streamLogs", serverStreaming: true, options: {}, I: LogFilter, O: LogLine }
]);
