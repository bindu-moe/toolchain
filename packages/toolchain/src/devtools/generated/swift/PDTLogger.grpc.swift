//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: PDTLogger.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `PaperbackLoggerClient`, then call methods of this protocol to make API calls.
public protocol PaperbackLoggerClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: PaperbackLoggerClientInterceptorFactoryProtocol? { get }

  func streamLogs(
    _ request: LogFilter,
    callOptions: CallOptions?,
    handler: @escaping (LogLine) -> Void
  ) -> ServerStreamingCall<LogFilter, LogLine>
}

extension PaperbackLoggerClientProtocol {
  public var serviceName: String {
    return "PaperbackLogger"
  }

  /// Server streaming call to streamLogs
  ///
  /// - Parameters:
  ///   - request: Request to send to streamLogs.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func streamLogs(
    _ request: LogFilter,
    callOptions: CallOptions? = nil,
    handler: @escaping (LogLine) -> Void
  ) -> ServerStreamingCall<LogFilter, LogLine> {
    return self.makeServerStreamingCall(
      path: "/PaperbackLogger/streamLogs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makestreamLogsInterceptors() ?? [],
      handler: handler
    )
  }
}

public protocol PaperbackLoggerClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'streamLogs'.
  func makestreamLogsInterceptors() -> [ClientInterceptor<LogFilter, LogLine>]
}

public final class PaperbackLoggerClient: PaperbackLoggerClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: PaperbackLoggerClientInterceptorFactoryProtocol?

  /// Creates a client for the PaperbackLogger service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: PaperbackLoggerClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol PaperbackLoggerProvider: CallHandlerProvider {
  var interceptors: PaperbackLoggerServerInterceptorFactoryProtocol? { get }

  func streamLogs(request: LogFilter, context: StreamingResponseCallContext<LogLine>) -> EventLoopFuture<GRPCStatus>
}

extension PaperbackLoggerProvider {
  public var serviceName: Substring { return "PaperbackLogger" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "streamLogs":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<LogFilter>(),
        responseSerializer: ProtobufSerializer<LogLine>(),
        interceptors: self.interceptors?.makestreamLogsInterceptors() ?? [],
        userFunction: self.streamLogs(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol PaperbackLoggerServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'streamLogs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makestreamLogsInterceptors() -> [ServerInterceptor<LogFilter, LogLine>]
}
